name: Run Tests

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  test:
    name: Test Services
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [job-enricher, job-extractor, job-matcher, resume-parser]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('services/{0}/requirements.txt', matrix.service)) }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: services/${{ matrix.service }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff

    - name: Run linting
      working-directory: services/${{ matrix.service }}
      run: |
        # Check code formatting
        ruff check .
      continue-on-error: true

    - name: Run tests
      working-directory: services/${{ matrix.service }}
      env:
        PYTHONPATH: ${{ github.workspace }}/services/${{ matrix.service }}:${{ github.workspace }}/shared
      run: |
        # Run tests if they exist
        if [ -f "test_api.py" ] || [ -d "tests" ]; then
          pytest -v --tb=short || echo "Tests failed but continuing"
        else
          echo "No tests found for ${{ matrix.service }}"
        fi

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create .env file
      run: |
        cat > .env << EOF
        OPENAI_API_KEY=dummy-key-for-testing
        SUPABASE_URL=http://localhost:54321
        SUPABASE_PRIVATE_SERVICE_ROLE_KEY=dummy-key-for-testing
        REDIS_HOST=redis
        LOG_LEVEL=INFO
        EOF

    - name: Build services
      run: |
        docker-compose build

    - name: Start services
      run: |
        docker-compose up -d
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 30

    - name: Check service health
      run: |
        # Check if services are healthy
        make health || true
        
        # Show service status
        docker-compose ps

    - name: Run integration tests
      run: |
        # Run integration tests if they exist
        if [ -f "tests/test_integration.py" ]; then
          python tests/test_integration.py || echo "Integration tests failed but continuing"
        fi

    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose logs

    - name: Stop services
      if: always()
      run: |
        docker-compose down -v