name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: 558379060332.dkr.ecr.ap-southeast-1.amazonaws.com/microservices
  ECS_CLUSTER: microservices-cluster

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push images
      id: build-images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push each service
        for SERVICE in job-enricher job-extractor job-matcher resume-parser; do
          echo "Building $SERVICE..."
          docker build -t $ECR_REGISTRY/microservices/$SERVICE:$IMAGE_TAG \
            -t $ECR_REGISTRY/microservices/$SERVICE:latest \
            -f services/$SERVICE/dockerfile \
            --platform linux/amd64 \
            services/$SERVICE
          
          echo "Pushing $SERVICE..."
          docker push $ECR_REGISTRY/microservices/$SERVICE:$IMAGE_TAG
          docker push $ECR_REGISTRY/microservices/$SERVICE:latest
        done

    - name: Update ECS services
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Update each service with new task definition
        for SERVICE in job-enricher job-extractor job-matcher resume-parser; do
          echo "Updating $SERVICE..."
          
          # Download current task definition
          aws ecs describe-task-definition --task-definition $SERVICE \
            --query 'taskDefinition' > task-def-$SERVICE.json
          
          # Update the image tag
          NEW_IMAGE="${{ steps.login-ecr.outputs.registry }}/microservices/$SERVICE:$IMAGE_TAG"
          jq --arg IMAGE "$NEW_IMAGE" \
            '.containerDefinitions[0].image = $IMAGE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            task-def-$SERVICE.json > new-task-def-$SERVICE.json
          
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def-$SERVICE.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Update service
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service $SERVICE \
            --task-definition $NEW_TASK_DEF \
            --force-new-deployment
          
          echo "‚úÖ $SERVICE updated successfully"
        done

    - name: Wait for services to stabilize
      run: |
        echo "Waiting for services to stabilize..."
        for SERVICE in job-enricher job-extractor job-matcher resume-parser; do
          echo "Waiting for $SERVICE..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services $SERVICE \
            --no-cli-pager || true
          echo "‚úÖ $SERVICE is stable"
        done
        echo "üéâ All services deployed successfully!"

    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful for commit ${{ github.sha }}"
        else
          echo "‚ùå Deployment failed for commit ${{ github.sha }}"
        fi